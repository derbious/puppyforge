#!/bin/bash
### BEGIN INIT INFO
# Provides:          puppyforge
# Required-Start:    networking
# Required-Stop:     networking
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Minimal puppet forge
# Description:       This minimal implementation of the puppet forge
#                    can serve files from the filesystem with the v3 API.
### END INIT INFO


# Defined here for distributions that don't define
# log_end_msg
log_end_msg () {
  retval=$1
  if [ ! $retval -eq 0 ]; then
    echo " failed!"
  fi
  return $retval
}

# Using the lsb functions to perform the operations.
. /etc/init.d/functions
# Process name ( For display )
NAME=puppyforge
# Daemon name, where is the actual executable
DAEMON=/usr/local/bin/puppyforge
# pid file for the daemon
PIDFILE=/var/run/puppyforge.pid
LOGFILE=/var/log/puppyforge.log
LANG="C"

# If the daemon is not there, then exit.
test -x $DAEMON || exit 5


start() {
    # Checked the PID file exists and check the actual status of process
    if [ -e $PIDFILE ]; then
        status_of_proc -p $PIDFILE $DAEMON "$NAME process" && status="0" || status="$?"
        # If the status is SUCCESS then don't need to start again.
        if [ $status = "0" ]; then
            exit # Exit
        fi
    fi
    # Start the daemon.
    echo -n "Starting $NAME: "
    # Start the daemon with the help of daemon
    daemon --pidfile $PIDFILE "nohup $DAEMON >$LOGFILE 2>&1 &"
    RETVAL=$?
    [ $RETVAL = 0 ] && pidofproc $DAEMON > $PIDFILE
    echo ""
}

stop() {
    # Stop the daemon.
    if [ -e $PIDFILE ]; then
        checkpid $(cat $PIDFILE) && status="0" || status="$?"
        if [ "$status" = 0 ]; then
            echo -n "Stopping $NAME: "
            killproc -p $PIDFILE $DAEMON
            echo ""
        fi
    else
        echo "$NAME is not running"
    fi
}

status() {
    if [ -e $PIDFILE ]; then
        checkpid $(cat $PIDFILE)
        local retcode=$?
        if [ $retcode == 0 ]; then
            echo "$NAME (pid $(cat $PIDFILE)) is running..." && exit 0
        else
            exit $retcode
        fi
    else
       echo "$NAME is not running"
    fi
}

case $1 in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        start
        ;;
    status)
        status
        RETVAL=$?
        ;;
    *)
        echo "Usage : $NAME {start|stop|restart|status}"
        RETVAL=2
esac

exit $RETVAL
